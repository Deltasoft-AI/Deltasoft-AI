type Promisable<T> = T | PromiseLike<T>;
type Prompt = string | Conversation[];
interface Conversation {
    role: "user" | "system" | "model";
    content: string;
    name?: string;
}

declare class Poe {
    private __urls;
    private __headers;
    private __ws_domain;
    private __formkey?;
    private __channel_data?;
    private __queries;
    private __queue;
    private __queue_count;
    private __bot_name;
    private __bot?;
    private __poe_tokens;
    constructor(options: {
        tokens: string[];
        bot_name: string;
        purge_conversation?: {
            enable: boolean;
            count: number;
        };
    });
    private load_queries;
    private init;
    private connect_ws;
    private disconnect_ws;
    private request;
    ask(prompt: Prompt, options?: {
        on_idling?: (count: number) => Promisable<void>;
        on_complete?: (count: number, response: string) => Promisable<void>;
    }): Promise<string>;
    private subscribe;
    private send_message;
    private get_message;
    history(count?: number, cursor?: null): Promise<any>;
    delete(...message_ids: (number | number[])[]): Promise<Record<string, any> | null>;
    purge(count?: number): Promise<void>;
}

export { Conversation, Poe, Prompt };
